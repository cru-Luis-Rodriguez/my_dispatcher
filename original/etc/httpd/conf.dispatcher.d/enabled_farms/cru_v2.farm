/cru {
	# client headers which should be passed through to the render instances
	# (feature supported since dispatcher build 2.6.3.5222)
	/clientheaders {
		$include "../clientheaders/clientheaders.any"
	}
	# hostname globbing for farm selection (virtual domain addressing)
	/virtualhosts {
		"stage.cru.org"
    "give-stage.cru.org"
	}
	# the load will be balanced among these render instances
	/renders {
		$include "../renders/default_renders.any"
	}
	# only handle the requests in the following acl. default is 'none'
	# the glob pattern is matched against the first request line
	/filter
    {
        /0001 { /type "deny" /url "*" }
        /0002 { /type "allow" /url "/scripts/*.js" }
        /0022 { /type "allow" /url "/content*" }
        /0029 { /type "allow" /url "GET /html/*" }
        /0030 { /type "allow" /url "/images*" }
        /0031 { /type "allow" /url "/fonts*" }
        /0032 { /type "allow" /url "/*/images*" }
        /0033 { /type "allow" /url "/*/styles*" }
        /0034 { /type "allow" /url "/gsw*" }
        /0035 { /type "allow" /url "/give*" }
        /0036 { /type "allow" /url "/jf*" }
        /0037 { /type "allow" /url "/dev/*" }
        /0038 { /type "allow" /url "/leaderimpact*" }
        /0039 { /type "allow" /url "/staffweb*" }
        /0040 { /type "allow" /url "*.svg" }
        /0041 { /type "allow" /url "*.css" }
        /0042 { /type "allow" /url "*.gif" }
        /0043 { /type "allow" /url "*.ico" }
        /0044 { /type "allow" /url "*.js" }
        /0045 { /type "allow" /url "*.png" }
        /0046 { /type "allow" /url "*.swf" }
        /0047 { /type "allow" /url "*.jpg" }
        /0048 { /type "allow" /url "*.jpeg" }
        /0049 { /type "allow" /url "*.txt" }
        /0050 { /type "allow" /url "GET /etc/designs/*" }
        /0051 { /type "allow" /url "GET /etc/clientlibs/*" }
        /0052 { /type "allow" /url "GET /bin/statistics/tracker/*" }
        /0054 { /type "allow" /url "* /home/users/*/*/profile.form.html*" }
        /0057 { /type "allow" /url "GET /home/users/*/profile/*" }
        /0058 { /type "allow" /url "GET /libs/cq/personalization/components/clickstreamcloud/content/config.json*" }
        /0059 { /type "allow" /url "GET /etc/clientcontext/*" }
        /0060 { /type "allow" /url "GET /etc/segmentation.segment.js*" }
        /0061 { /type "allow" /url "POST /content/[.]*.form.html" }
        /0062 { /type "allow" /url "/libs/cq/personalization/*" }
        /0063 { /type "allow" /url "GET /system/sling/logout*" }
        /0064 { /type "allow" /url "GET /etc/cloudservices/*" }
        /0065 { /type "allow" /url "GET /libs/wcm/stats/tracker.js*" }
        /0066 { /type "allow" /url "GET /libs/cq/security/userinfo.json*" }
        /0067 { /type "allow" /url "GET /libs/cq/i18n/*" }
        /0081 { /type "deny" /url "*.infinity.json*" }
        /0082 { /type "deny" /url "*.tidy.json*" }
        /0083 { /type "deny" /url "*.sysview.xml*" }
        /0084 { /type "deny" /url "*.docview.json*" }
        /0085 { /type "deny" /url "*.docview.xml*" }
        /0086 { /type "deny" /url "*.*[0-9].json*" }
        /0087 { /type "deny" /url "*.feed.xml*" }
        /0088 { /type "deny" /url "*.php*" }
        /0089 { /type "deny" /url "*.asp*" }
        /0090 { /type "deny" /url "*.query.json*" }
        /0091 { /type "allow" /method "GET"/url "/content/experience-fragments/*.infinity.json*" }
        /0092 { /type "allow" /method "GET"/url "/content/experience-fragments/*.json*" }
        /0093 { /type "allow" /method "GET"/url "/content/give/us/en/designations/*/*.infinity.json*" }
        /0094 { /type "allow" /method "GET"/url "/content/give/us/en/campaigns/*/*.infinity.json*" }
        /0096 { /type "allow" /method "GET"/url "/content/give/us/en/campaigns/*/*.infinity.json*" }
        /0097 { /type "allow" /method "GET"/url "/content/jf/us/*/*.infinity.json*" }
        /0098 { /type "allow" /url "GET /etc.clientlibs/*" }
        /0100 { /type "allow" /url "/libs/granite/dispatcher/content/vanityUrls.html" }
        /0170 { /type "allow" /url "GET /libs/granite/csrf/token.json*" }
        /0171 { /type "allow" /url "POST /content/sites/*/resource/en/*" }
        /0172 { /type "allow" /url "GET /content/communities/enablement/reports/*" }
        /0173 { /type "allow" /url "GET /content/sites/*" }
        /0174 { /type "allow" /url "GET /content/communities/scorm/*" }
        /0176 { /type "allow" /url "GET /libs/granite/security/userinfo.json" }
        /0177 { /type "allow" /url "GET /libs/granite/security/currentuser.json*" }
        /5003 { /type "allow" /url "GET /libs/cq/i18n/dict.en.json*" }
        /6002 { /type "allow" /url "GET *.social.*.json*" }
        /6003 { /type "allow" /url "GET /services/social/templates*" }
        /6004 { /type "allow" /url "GET /services/social/getLoggedInUser*" }
        /6005 { /type "allow" /url "GET /etc/clientlibs/social/thirdparty/ckeditor/*.js?t=*" }
        /6006 { /type "allow" /url "GET /etc/clientlibs/social/thirdparty/ckeditor/*.css?t=*" }
        /6050 { /type "allow" /url "GET *.woff *" }
        /6051 { /type "allow" /url "GET *.ttf *" }
        /7001 { /type "allow" /url "GET /libs/cq/security/userinfo.json?cq_ck=*" }
        /7002 { /type "allow" /url "GET /libs/cq/security/currentuser.json?props=preferences/language&cq_ck=*" }
        /7003 { /type "allow" /url "GET /bin/cru/*" }
        /7004 { /type "allow" /url "POST /bin/cru/*" }
        /7005 { /type "allow" /url "GET /services/tagfilter*" }
        /7006 { /type "allow" /url "POST /content/cru-communities/colleges/*/en/*/jcr:content/content/primary/communitygroups.social.json" }
        /7007 { /type "allow" /url "GET /content/cru-communities/colleges/*/en/*/jcr:content/content/primary/communitygroups.social.json" }
        /7008 { /type "allow" /url "GET /bin/cas/*" }
        /7009 { /type "allow" /url "POST /bin/cas/*" }
        /7010 { /type "allow" /url "GET /bin/jf/*" }
        /7011 { /type "allow" /url "GET /bin/querybuilder.json?*" }
        /7012 { /type "allow" /url "POST /bin/crugive/*" }
        /7013 { /type "allow" /url "GET /bin/crugive/*" }
        /7014 { /type "allow" /url "HEAD /bin/crugive/*" }
        /7015 { /type "allow" /url "GET /bin/staffweb/*" }
        /7016 { /type "allow" /url "POST /bin/staffweb/*" }
        /7017 { /type "allow" /url "POST /content/usergenerated/asi/mongo/*" }
        /7018 { /type "allow" /url "GET /content/usergenerated/asi/mongo/*" }
        /7019 { /type "allow" /url "GET /bin/leaderimpact/*" }
        /7020 { /type "allow" /url "POST /bin/leaderimpact/*" }
        /7021 { /type "allow" /url "GET /bin/leaderhub/*" }
        /7022 { /type "allow" /url "POST /bin/leaderhub/*" }
        /7023 { /type "allow" /method "GET" /path "/content/dam" /extension '(renditions)' }
        /7024 { /type "deny" /method "GET" /url "/bin/querybuilder.feed.*" }
        /7025 { /type "deny" /method "GET" /url "/bin/wcm/*/gql.json*" }
        /7026 { /type "deny" /method "GET" /url "/system/sling/loginstatus.*" }
        /7027 { /type "deny" /method "GET" /url "/system/sling/loginstatus.js" }
    }
	# if the package is installed on publishers to generate a list of all content with a vanityurl attached
	# this section will auto-allow the items to bypass the normal dispatcher filters
	# Reference: https://docs.adobe.com/docs/en/dispatcher/disp-config.html#Enabling%20Access%20to%20Vanity%20URLs%20-%20/vanity_urls
	#/vanity_urls {
	#	/url    "/libs/granite/dispatcher/content/vanityUrls.html"
	#	/file   "/tmp/vanity_urls"
	#	/delay  300
	# }
	# allow propagation of replication posts (should seldomly be used)
	/propagateSyndPost "0"
	# the cache is used to store requests from the renders for faster delivery
	# for a second time.
	/cache {
		# The cacheroot must be equal to the document root of the webserver
		/docroot "${DOCROOT}"
		# sets the level upto which files named ".stat" will be created in the
		# document root of the webserver. when an activation request for some
		# handle is received, only files within the same subtree are affected
		# by the invalidation.
		/statfileslevel "4"
		# caches also authorized data
		/allowAuthorized "0"
		# Flag indicating whether the dispatcher should serve stale content if
		# no remote server is available.
		/serveStaleOnError "2"
		# the rules define, which pages should be cached. please note that
		# - only GET requests are cached
		# - only requests with an extension are cached
		# - only requests without query parameters ( ? ) are cached
		# - only unauthorized pages are cached unless allowUnauthorized is set to 1
		/rules
		{
			$include "../cache/rules.any"
			/0013
        {
          /glob "/bin/crugive/*"
          /type "deny"
        }
      /disable-nocache
        {
         /glob "*.nocache.html*"
         /type "deny"
        }
		}
		# the invalidate section defines those pages which are 'invalidated' after
		# any activation. please note that, the activated page itself and all 
		# related documents are flushed on an modification. for example: if the 
		# page /foo/bar is activated, all /foo/bar.* files are removed from the
		# cache.
		/invalidate {
			/0000 {
				/glob "*"
				/type "deny"
			}
			/0001 {
				/glob "*.html"
				/type "allow"
			}
			# to ensure that AEM forms HTMLs are not auto-invalidated due to invalidation of any other resource. It is supposed to be deleted only after its own activation.
			/0002
			{
				/glob "/content/forms/**/*.html"
				/type "deny"
			}
		}
		/allowedClients {
			$include "../cache/default_invalidate.any"
		}
		# The ignoreUrlParams section contains query string parameter names that
		# should be ignored when determining whether some request's output can be
		# cached or delivered from cache.
		# In this example configuration, the "q" parameter will be ignored.
		/ignoreUrlParams
        {
        /0001
          {
            /glob "*"
            /type "deny"
          }
        /0002
          {
            /glob "ticket="
            /type "deny"
          }
        }

		# Cache response headers next to a cached file. On the first request to
		# an uncached resource, all headers matching one of the values found here
		# are stored in a separate file, next to the cache file. On subsequent
		# requests to the cached resource, the stored headers are added to the
		# response.
		# Note, that file globbing characters are not allowed here.
		/headers {
			"Cache-Control"
			"Content-Disposition"
			"Content-Type"
			"Expires"
			"Last-Modified"
			"X-Content-Type-Options"
		}
		# A grace period defines the number of seconds a stale, auto-invalidated
		# resource may still be served from the cache after the last activation
		# occurring. Auto-invalidated resources are invalidated by any activation,
		# when their path matches the /invalidate section above. This setting
		# can be used in a setup, where a batch of activations would otherwise
		# repeatedly invalidate the entire cache.
		/gracePeriod "2"

		# Enable TTL evaluates the response headers from the backend, and if they
		# contain a Cache-Control max-age or Expires date, an auxiliary, empty file
		# next to the cache file is created, with modification time equal to the
		# expiry date. When the cache file is requested past the modification time
		# it is automatically re-requested from the backend.
		/enableTTL "1"
	}
}
